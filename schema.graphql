type OpenFarm @entity {
  id: ID!
  totalFarmCount: BigInt!
  totalErc20Count: BigInt!
}
type StatPool @entity{
    id: ID!
    creater: String!
    spotPoolId: String!
}
type TemplateAToken @entity {
    id: ID!
    symbol: String
    name: String
    decimals: Int!
    address: Bytes!
    totalSupply: BigInt!
    issuer: Bytes!
    timestamp: BigInt!
}

type FarmPool @entity {
    id: ID!
    farmPoolId: BigInt!                  # for sorting
    spotPoolId: String!               # spot pool address
    rewardsToken: String!
    stakingToken: String!
    creater: String!
    startBlock: BigInt!
    endBlock: BigInt!
    rewardsDuration: BigInt!             # duration = start - block + 1
    rewardRatio: BigInt!
    totalSupply: BigInt!
    unlockRatio: BigInt!
    halflifeK: BigInt!
    halflifeRatio: BigInt!
    stakes: [FarmStake!] @derivedFrom(field: "farmPoolId")
    streams: [RewardStream!] @derivedFrom(field: "farmPoolId")
    proposals:[VoteProposal!] @derivedFrom(field: "farmPoolId")
    tx: Bytes                                           # Farm Pool creation transaction id
}

type FarmStake @entity {
    id: ID!                                             # poolId + userAddress
    userAddress: User!
    farmPoolId: FarmPool!
    amount: BigDecimal!
}

type RewardStream @entity {
    id: ID!
    userAddress: User!
    farmPoolId: FarmPool!
    streamId: BigInt!               # 0 means not exist
    amount: BigDecimal!
}

type User @entity {
    id: ID!
    staked: [FarmStake!]  @derivedFrom(field: "userAddress")
    streamed: [RewardStream!]  @derivedFrom(field: "userAddress")
    txs: [Transaction!]  @derivedFrom(field: "userAddress")
}

type VoteProposal @entity {
    id: ID!
    farmPoolId: FarmPool!
}

type Transaction @entity {
    id: ID!                         # Log ID
    tx: Bytes!
    event: String
    block: BigInt!
    timestamp: BigInt!
    gasUsed: BigDecimal!
    gasPrice: BigDecimal!
    farmPoolId: Int
    userAddress: User
    action: TrxType
    sender: Bytes
}

enum TrxType {
    farmPoolStake,
    farmPoolWithdraw,
    farmPoolExit,
    rewardPaid,
    rewardToStream
}
